import os
import logging
from flask import Blueprint, request, jsonify, current_app, session
from openai import OpenAI
import traceback

ai_bp = Blueprint('ai', __name__)

# Configurar a chave da API OpenAI usando vari√°vel de ambiente
api_key = os.getenv('OPENAI_API_KEY')
if not api_key:
    logging.warning("OPENAI_API_KEY n√£o configurada. Funcionalidade de IA em modo fallback.")
    client = None
else:
    try:
        client = OpenAI(api_key=api_key)
        logging.info("‚úÖ OpenAI client inicializado com sucesso! Planos personalizados habilitados.")
        print("ü§ñ OpenAI configurada! Planos de aula ser√£o gerados por IA.")
    except Exception as e:
        logging.error(f"Erro ao inicializar cliente OpenAI: {e}")
        client = None

def gerar_plano_modelo(componente, ano, tema, habilidades, objetivos):
    """Gera um plano de aula modelo quando a IA n√£o est√° dispon√≠vel"""
    return f"""
# üìö PLANO DE AULA: {tema}

## üéØ INFORMA√á√ïES GERAIS
- **Componente Curricular:** {componente}
- **Ano/S√©rie:** {ano}¬∫ ano do Ensino Fundamental
- **Tema:** {tema}
- **Dura√ß√£o:** 50 minutos
- **Modalidade:** Presencial

## üìù HABILIDADES BNCC
{habilidades}

## üéØ OBJETIVOS DE APRENDIZAGEM
{objetivos}

## üìã OBJETIVOS ESPEC√çFICOS
- Compreender os conceitos fundamentais relacionados ao tema
- Desenvolver habilidades pr√°ticas atrav√©s de atividades direcionadas
- Aplicar o conhecimento adquirido em situa√ß√µes do cotidiano
- Participar ativamente das discuss√µes e atividades propostas

## üõ†Ô∏è MATERIAIS NECESS√ÅRIOS
- Quadro e giz/marcador
- Material did√°tico (livros, apostilas)
- Recursos audiovisuais (quando dispon√≠vel)
- Material para atividades pr√°ticas
- Caderno e material de escrita dos alunos

## üìö DESENVOLVIMENTO DA AULA

### üöÄ Introdu√ß√£o (10 minutos)
- **Acolhida:** Recep√ß√£o dos alunos e chamada
- **Motiva√ß√£o:** Apresenta√ß√£o do tema atrav√©s de pergunta instigante ou situa√ß√£o-problema
- **Objetivos:** Explica√ß√£o clara do que ser√° aprendido na aula
- **Conhecimentos pr√©vios:** Levantamento do que os alunos j√° sabem sobre o tema

### üéì Desenvolvimento (30 minutos)
- **Apresenta√ß√£o do conte√∫do:** Explica√ß√£o te√≥rica do tema de forma did√°tica e interativa
- **Exemplos pr√°ticos:** Demonstra√ß√£o de situa√ß√µes reais relacionadas ao conte√∫do
- **Atividade dirigida:** Exerc√≠cio pr√°tico orientado pelo professor
- **Discuss√£o:** Momento para esclarecimento de d√∫vidas e participa√ß√£o ativa dos alunos

### üéØ Conclus√£o (10 minutos)
- **S√≠ntese:** Resumo dos pontos principais abordados
- **Aplica√ß√£o:** Discuss√£o sobre como aplicar o conhecimento no dia a dia
- **Avalia√ß√£o formativa:** Verifica√ß√£o da compreens√£o atrav√©s de perguntas
- **Pr√≥ximos passos:** Apresenta√ß√£o do que ser√° visto na pr√≥xima aula

## üìä AVALIA√á√ÉO
- **Formativa:** Observa√ß√£o da participa√ß√£o e compreens√£o durante a aula
- **Diagn√≥stica:** Verifica√ß√£o atrav√©s de perguntas e respostas
- **Atividade pr√°tica:** Exerc√≠cio para fixa√ß√£o do conte√∫do
- **Autoavalia√ß√£o:** Reflex√£o dos alunos sobre seu pr√≥prio aprendizado

## üè† ATIVIDADES COMPLEMENTARES
- **Para casa:** Exerc√≠cios de fixa√ß√£o relacionados ao tema
- **Pesquisa:** Investiga√ß√£o sobre aspectos espec√≠ficos do conte√∫do
- **Leitura complementar:** Textos adicionais para aprofundamento
- **Projeto:** Trabalho pr√°tico para aplica√ß√£o dos conhecimentos

## üîç ESTRAT√âGIAS DIFERENCIADAS
- **Alunos com dificuldades:** Aten√ß√£o individualizada e exerc√≠cios adaptados
- **Alunos avan√ßados:** Atividades de aprofundamento e desafios extras
- **Recursos visuais:** Uso de imagens, gr√°ficos e esquemas para facilitar a compreens√£o
- **Metodologias ativas:** Incentivo √† participa√ß√£o e protagonismo dos alunos

## üìö REFER√äNCIAS
- Base Nacional Comum Curricular (BNCC)
- Livro did√°tico adotado pela escola
- Recursos pedag√≥gicos complementares
- Materiais de apoio do professor

---
*Plano gerado pelo Sistema EDU-PLATAFORMA - Vers√£o modelo educacional*
*Este plano deve ser adaptado conforme as necessidades espec√≠ficas da turma*
"""

@ai_bp.route('/gerar-plano', methods=['POST'])
def gerar_plano():
    try:
        current_app.logger.info("Iniciando gera√ß√£o de plano de aula")
        
        # Verificar se o usu√°rio est√° logado
        if 'user_id' not in session:
            current_app.logger.warning("Tentativa de acesso sem autentica√ß√£o")
            return jsonify({"success": False, "error": "Usu√°rio n√£o autenticado"}), 401

        # Obter dados do formul√°rio
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Dados n√£o fornecidos"}), 400
            
        componente = data.get('componente', '').strip()
        ano = data.get('ano', '').strip()
        tema = data.get('tema', '').strip()
        habilidades = data.get('habilidades', '').strip()
        objetivos = data.get('objetivos', '').strip()
        
        current_app.logger.info(f"Dados recebidos: componente={componente}, ano={ano}, tema={tema}")
        
        # Validar dados
        if not all([componente, ano, tema, habilidades, objetivos]):
            return jsonify({
                "success": False, 
                "error": "Todos os campos s√£o obrigat√≥rios. Verifique se selecionou uma habilidade BNCC."
            }), 400

        # Tentar usar IA da OpenAI primeiro
        if client:
            try:
                current_app.logger.info("Tentando gerar plano com IA da OpenAI")
                
                # Criar prompt para a IA
                prompt = f"""
                Crie um plano de aula completo e detalhado para o componente curricular de {componente} 
                para o {ano}¬∫ ano do Ensino Fundamental, seguindo rigorosamente a BNCC.
                
                Tema da aula: {tema}
                Habilidades BNCC envolvidas: {habilidades}
                Objetivos de aprendizagem: {objetivos}
                
                Estruture o plano de aula com os seguintes elementos:
                1. T√≠tulo criativo e atraente
                2. Informa√ß√µes gerais (dura√ß√£o, modalidade, etc.)
                3. Objetivos espec√≠ficos e mensur√°veis
                4. Habilidades da BNCC trabalhadas (com c√≥digos)
                5. Materiais necess√°rios
                6. Desenvolvimento detalhado (introdu√ß√£o, desenvolvimento, conclus√£o)
                7. Estrat√©gias de avalia√ß√£o
                8. Atividades complementares
                9. Refer√™ncias bibliogr√°ficas
                
                Seja detalhado e pr√°tico, fornecendo exemplos concretos quando apropriado.
                Formate o texto usando markdown para melhor visualiza√ß√£o.
                """
                
                # Chamar API da OpenAI
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um especialista em educa√ß√£o brasileira com 20 anos de experi√™ncia em cria√ß√£o de planos de aula alinhados √† BNCC. Sempre responda em portugu√™s brasileiro."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7,
                    max_tokens=2500,
                    timeout=30  # Timeout de 30 segundos
                )
                
                # Extrair e formatar resposta
                plano_gerado = response.choices[0].message.content.strip()
                current_app.logger.info("Plano gerado com sucesso usando IA")
                
                return jsonify({
                    "success": True,
                    "plano": plano_gerado,
                    "tipo": "ia"
                })
                
            except Exception as e:
                current_app.logger.error(f"Erro na API OpenAI: {str(e)}")
                # Continuar para gerar plano modelo
                pass
        
        # Gerar plano modelo se IA n√£o estiver dispon√≠vel
        current_app.logger.info("Gerando plano modelo (fallback)")
        plano_modelo = gerar_plano_modelo(componente, ano, tema, habilidades, objetivos)
        
        return jsonify({
            "success": True,
            "plano": plano_modelo,
            "tipo": "modelo",
            "aviso": "Plano gerado usando modelo educacional. Para planos personalizados, configure a API OpenAI."
        })
    
    except Exception as e:
        current_app.logger.error(f"Erro geral ao gerar plano: {str(e)}")
        current_app.logger.error(f"Traceback: {traceback.format_exc()}")
        
        return jsonify({
            "success": False,
            "error": "Erro interno do servidor. Tente novamente em alguns instantes."
        }), 500